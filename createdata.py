import numpy as np
from scipy.interpolate import CubicHermiteSpline
import matplotlib.pyplot as plt
import svgpathtools as svg

HEIGHT = 250

def pad_top(arr):
    return np.concatenate((arr,[-1 for _ in range(HEIGHT-len(arr))]))


def godis():
    h = np.arange(0,HEIGHT)
    godis_o = np.linspace(60,74,165)/2
    godis_i = np.linspace(godis_o[17]*2-4,71,148)/2
    godis_ip = 17
    godis_v = np.zeros(len(godis_i))
    
    for i,r in enumerate(godis_i):
        godis_v[i] = np.pi*r*r
        if i > 0:
            godis_v[i] += godis_v[i-1]
    godis_v = godis_v/1000

    padbot = [-1 for _ in range(godis_ip)]
    godis_i = np.concatenate((padbot,godis_i))
    godis_i = pad_top(godis_i)
    godis_v = np.concatenate((padbot,godis_v))
    godis_v = pad_top(godis_v)
    godis_o = pad_top(godis_o)
    
    print('i')
    print(*godis_i,sep=",")
    print('o')
    print(*godis_o,sep=",")
    print('v')
    print(*godis_v,sep=",")
    print(np.array(np.where(godis_v>=400)).min())

def karmeliet():
    h = np.arange(0,HEIGHT)
    p1 = np.ones(5)*80
    p2 = np.linspace(80,25,14-5)
    p3 = np.ones(7)*25
    p4 = np.linspace(25,18,3)
    p5 = np.linspace(18,24,80-len(p1)-len(p2)-len(p3)-len(p4))
        
    path = svg.parse_path("m 83.73506,220.21328 c 0.443667,-0.51155 0.493498,-0.86032 0.365236,-2.55624 -0.175898,-2.32576 0.258323,-3.74268 1.579663,-5.15467 0.858224,-0.9171 0.86129,-0.93025 0.95522,-4.09506 0.08425,-2.83885 -0.134197,-6.8559 -1.035952,-19.05 -0.150659,-2.03729 -0.442518,-6.50213 -0.648576,-9.92187 -0.20606,-3.41974 -0.495969,-7.28927 -0.644247,-8.59896 -0.148278,-1.30969 -0.271711,-2.41102 -0.274296,-2.4474 -0.0026,-0.0364 -0.128744,-0.0661 -0.280347,-0.0661 -0.151607,0 -0.53856,-0.24804 -0.859896,-0.55119 -0.568984,-0.53679 -2.433156,-1.67592 -5.5649,-3.40052 -5.180173,-2.85265 -10.975437,-7.28205 -14.734549,-11.26183 -2.515085,-2.66273 -5.260147,-6.43679 -6.543126,-8.99584 -0.751094,-1.49814 -1.837418,-4.84606 -2.207452,-6.8031 -0.378116,-1.99978 -0.383158,-7.72895 -0.0094,-10.6594 0.246945,-1.93608 1.576968,-6.76286 2.167966,-7.86776 0.135159,-0.25269 0.245744,-0.59188 0.245744,-0.75377 0,-0.16188 0.171725,-0.66951 0.381611,-1.12807 0.209886,-0.45855 0.991067,-2.32201 1.735958,-4.14102 0.744891,-1.81901 1.453847,-3.54542 1.575458,-3.83646 0.986979,-2.36207 1.334056,-3.34197 1.334056,-3.76645 0,-0.27134 0.112234,-0.60645 0.24941,-0.7447 0.280618,-0.2828 0.72582,-1.91805 1.112923,-4.08781 0.142792,-0.800365 0.389611,-1.871927 0.548488,-2.38125 0.188981,-0.605833 0.748056,-6.131232 0.815923,-15.979342 0.08776,-12.734189 -0.03891,-15.105017 -0.02659,-15.837434")
    x = np.linspace(0,1,10)
    ws = np.empty(0)
    for p in path:
        ws = np.append(ws,np.array(p.poly()(x)))
    x = ((np.real(ws)-86.7)*(105-18)/33.18-18)*-1
    y = (np.imag(ws)-220)*-1-11
    p6 = np.interp(np.arange(40,140),y,x)

    o = np.concatenate((p1,p2,p3,p4,p5,p6))
    print(len(o))
    o = pad_top(o/2)
    i = p6-2
    i[:6] = [0,0,0,0,0,0]
    i[6] = i[6]/3
    i[7] = i[7]/2
    i[8] = i[8]/1.5
    i[9] = i[9]/1.25
    i[10] = i[10]/1.12
    i[11] = i[11]/1.06
    i[12] = i[12]/1.03
    i[13] = i[13]/1.01
    i = np.concatenate((np.zeros(len(p1)+len(p2)+len(p3)+len(p4)+len(p5)),i))
    k_v = np.zeros(len(i))
        
    for j,r in enumerate(i):
        k_v[j] = np.pi*r*r
        if j > 0:
            k_v[j] += k_v[j-1]
    k_v = k_v/1000
    i = pad_top(i/2)
    k_v = pad_top(k_v/2)

    print(*o,sep=",")
    print(*i,sep=",")
    print(*k_v,sep=",")
    print(np.array(np.where(k_v>=330)).min())


def testfit():
    path = svg.parse_path("m 83.73506,220.21328 c 0.443667,-0.51155 0.493498,-0.86032 0.365236,-2.55624 -0.175898,-2.32576 0.258323,-3.74268 1.579663,-5.15467 0.858224,-0.9171 0.86129,-0.93025 0.95522,-4.09506 0.08425,-2.83885 -0.134197,-6.8559 -1.035952,-19.05 -0.150659,-2.03729 -0.442518,-6.50213 -0.648576,-9.92187 -0.20606,-3.41974 -0.495969,-7.28927 -0.644247,-8.59896 -0.148278,-1.30969 -0.271711,-2.41102 -0.274296,-2.4474 -0.0026,-0.0364 -0.128744,-0.0661 -0.280347,-0.0661 -0.151607,0 -0.53856,-0.24804 -0.859896,-0.55119 -0.568984,-0.53679 -2.433156,-1.67592 -5.5649,-3.40052 -5.180173,-2.85265 -10.975437,-7.28205 -14.734549,-11.26183 -2.515085,-2.66273 -5.260147,-6.43679 -6.543126,-8.99584 -0.751094,-1.49814 -1.837418,-4.84606 -2.207452,-6.8031 -0.378116,-1.99978 -0.383158,-7.72895 -0.0094,-10.6594 0.246945,-1.93608 1.576968,-6.76286 2.167966,-7.86776 0.135159,-0.25269 0.245744,-0.59188 0.245744,-0.75377 0,-0.16188 0.171725,-0.66951 0.381611,-1.12807 0.209886,-0.45855 0.991067,-2.32201 1.735958,-4.14102 0.744891,-1.81901 1.453847,-3.54542 1.575458,-3.83646 0.986979,-2.36207 1.334056,-3.34197 1.334056,-3.76645 0,-0.27134 0.112234,-0.60645 0.24941,-0.7447 0.280618,-0.2828 0.72582,-1.91805 1.112923,-4.08781 0.142792,-0.800365 0.389611,-1.871927 0.548488,-2.38125 0.188981,-0.605833 0.748056,-6.131232 0.815923,-15.979342 0.08776,-12.734189 -0.03891,-15.105017 -0.02659,-15.837434")
    x = np.linspace(0,1,10)
    ws = np.empty(0)
    for p in path:
        ws = np.append(ws,np.array(p.poly()(x)))
    x = ((np.real(ws)-86.7)*(105-18)/33.18-18)*-1
    y = (np.imag(ws)-220)*-1-11
    newx = np.interp(np.arange(40,140),y,x)

    plt.plot(newx,np.arange(40,140))
    plt.show()

def main():
    #testfit()
    karmeliet()

if __name__ == '__main__':
    main()